const MongoDB = require( 'mongodb' ),
    FormatCollectionName = require( './formatCollectionName' ),
    Database = require( './connection.js' ),
    Aggregation = require( './Aggregation' ),
    Log = require( '../methods/log' ),
    Events = require( '../methods/events' );

module.exports = function dbCollection( collection ) {

    if ( typeof collection !== 'string' ) return undefined;
    if ( ~[ 'inspect', 'valueOf' ].indexOf( collection ) )
        return undefined;

    collection = FormatCollectionName( collection );

    if ( collection == 'objectids' )
        return MongoDB.ObjectId;

    let builder = function ( q ) {
        return new Proxy( {}, {

            get: ( _, action ) => {

                if ( typeof action !== 'string' ) return undefined;
                if ( ~[ 'inspect', 'valueOf' ].indexOf( action ) )
                    return undefined;

                let target = {
                    query: q || []
                };

                // Aggregation sugar pipeline builder
                if ( action.toLowerCase() == 'aggregation' )
                    return Aggregation( collection );
                if ( action.toLowerCase() == 'match' )
                    return ( a ) => Aggregation( collection )
                        .match( a );
                if ( action.toLowerCase() == 'search' )
                    return ( a ) => Aggregation( collection )
                        .search( a );

                return function buildQuery() {

                    let mArgs = Array.from( arguments );

                    if ( action == 'then' ) {
                        let prom = new Promise( ( resolve, reject ) => {

                            Database( collection )
                                .then( db => {

                                    let query = target.query.shift(),
                                        opt = {};

                                    let args = query.args;
                                    let returnValue = false;

                                    if ( query.action == 'create' ) query.action = 'insert';
                                    if ( query.action == 'delete' ) query.action = 'remove';

                                    if ( action.toLowerCase() == 'save' ) {

                                        if ( !args[ 0 ]._id )
                                            action = insert;

                                        else {
                                            action = update;
                                            args = [ {
                                                    _id: args[ 0 ]._id
                                                },
                                                {
                                                    $set: args[ 0 ]
                                                }
                                            ];
                                        }

                                    }

                                    if ( query.action == 'set' ) {
                                        returnValue = true;
                                        if ( !args[ 2 ] ) args[ 2 ] = {};
                                        if ( args[ 2 ].new === undefined )
                                            args[ 2 ].new = true;
                                        args[ 2 ].query = args[ 0 ];
                                        args[ 2 ].update = {
                                            $set: args[ 1 ]
                                        };
                                        query.action = 'findAndModify';
                                        args = [ args[ 2 ] ];
                                    }

                                    if ( query.action == 'insert' )
                                        if ( Array.isArray( args[ 0 ] ) ) {
                                            let d = new Date();
                                            args[ 0 ].map( entry => {
                                                if ( !entry.createdAt )
                                                    entry.createdAt = d;
                                            } );
                                        } else if ( !args[ 0 ].createdAt )
                                        args[ 0 ].createdAt = new Date();

                                    if (
                                        query.action == 'findAndModify' &&
                                        args[ 0 ] &&
                                        args[ 0 ].update &&
                                        args[ 0 ].update.$set
                                    ) {
                                        args[ 0 ].update.$set.updatedAt = new Date();
                                        returnValue = true;
                                    }

                                    if (
                                        query.action == 'findAndModify' &&
                                        args.length == 1
                                    ) {
                                        let query = args[ 0 ].query || {},
                                            sort = args[ 0 ].sort || {},
                                            update = args[ 0 ].update || {};

                                        options = args[ 0 ];
                                        delete options.query;
                                        delete options.sort;
                                        delete options.update;

                                        args = [
                                            query,
                                            sort,
                                            update,
                                            options
                                        ];
                                    }

                                    if ( query.action == 'update' ) {

                                        if ( !args[ 2 ] ) args[ 2 ] = {};
                                        if ( !args[ 2 ].multi ) {

                                            if ( !args[ 1 ].$set ) args[ 1 ].$set = {};
                                            args[ 1 ].$set.updatedAt = new Date();
                                            returnValue = true;

                                            query.action = 'findAndModify';

                                            let sort = {};
                                            if ( args[ 2 ].sort ) {
                                                sort = args[ 2 ].sort;
                                                delete args[ 2 ].sort;
                                            }

                                            args[ 2 ].new = true;

                                            args = [
                                                args[ 0 ],
                                                sort,
                                                args[ 1 ],
                                                args[ 2 ]
                                            ];
                                        }
                                    }

                                    args.push( function ( err, result ) {

                                        if ( err ) {
                                            Log.warn( `⚠️  ${collection}.${query.action} :`, err );
                                            return reject( err );
                                        }

                                        if ( target.query.length )
                                            if ( target.query.some( q => {

                                                    if ( !result[ q.action ] ) {
                                                        Log.warn( `⚠️  ${collection}.${query.action} : Chained method '${q.action}' error `, JSON.stringify( target.query ) );
                                                        return true;
                                                    }
                                                    result = result[ q.action ]
                                                        .apply( result, q.args );

                                                } ) ) return reject( 'Chained method error' );

                                        if ( result && result.toArray )
                                            result = result.toArray();

                                        if ( returnValue )
                                            result = result.value;

                                        if ( query.action == 'update' ) {
                                            db.find( args[ 0 ], ( err, res ) => resolve( res.toArray() ) );
                                        } else if ( [ 'insert', 'save', 'set' ].indexOf( query.action ) > -1 ) {
                                            if ( result && typeof result === 'object' &&
                                                Array.isArray( result.ops ) && result.ops.length
                                            )
                                                resolve( result.ops[ 0 ] );
                                            else
                                                resolve( result );
                                        } else {
                                            resolve( result );
                                        }

                                        if ( query.action == 'findAndModify' )
                                            query.action = 'update';

                                        if ( !~[
                                                'insert',
                                                'update',
                                                'save'
                                            ].indexOf( query.action ) )
                                            return;

                                        Events.emit(
                                            query.action + ':' + collection,
                                            result
                                        );

                                    } );

                                    db[ query.action ].apply( db, args );
                                    target.query = [];

                                }, reject );

                        } );

                        prom.then.apply( prom, mArgs );
                        return prom;
                    }

                    if ( ~[ 'forEach', 'map', 'some' ].indexOf( action ) )
                        return function ( cb, errhand ) {
                            builder.then( results => {
                                if ( results[ action ] )
                                    return results[ action ]( cb );
                                else errhand( `query.action not found : ${action}` );
                            }, errhand );
                        };

                    target.query.push( {
                        action: action,
                        args: mArgs
                    } );

                    return builder( target.query );

                };
            },

            set: () => {}

        } );
    };

    return builder( [] );

};
