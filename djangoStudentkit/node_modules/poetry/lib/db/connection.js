const MongoClient = require('mongodb').MongoClient,
  Log = require('../methods/log'),
  FS = require('fs');

const LOCAL = 'mongodb://localhost:27017/database';

const LOGGER_LEVELS = [
  'error', 'warn', 'info', 'debug'
];

// Are the env. variables set ?
var url = process.env.DATABASE;

const connectTimeoutMS = !isNaN(parseInt(process.env.connectTimeoutMS)) ? parseInt(process.env.connectTimeoutMS) : 10000;
const loggerLevel = process.env.dbLoggerLevel && LOGGER_LEVELS.includes(process.env.dbLoggerLevel) ? process.env.dbLoggerLevel : null;
// https://www.mongodb.com/community/forums/t/what-is-the-difference-between-poolsize-and-maxpoolsize/122757
const maxPoolSize = !isNaN(parseInt(process.env.MAXPOOLSIZE)) ? parseInt(process.env.MAXPOOLSIZE) : !isNaN(parseInt(process.env.POOLSIZE)) ? parseInt(process.env.POOLSIZE) : 5;
const maxIdleTimeMS = !isNaN(parseInt(process.env.maxIdleTimeMS)) ? parseInt(process.env.maxIdleTimeMS) : undefined;
const waitQueueTimeoutMS = !isNaN(parseInt(process.env.waitQueueTimeoutMS)) ? parseInt(process.env.waitQueueTimeoutMS) : 0;

let client;

module.exports = async function dbConnection(collection) {
  if (url) {
      let database;
    if (!client) {
      client = MongoClient.connect(url, {
        connectTimeoutMS,
        family: null,
        forceServerObjectId: false,
        ignoreUndefined: false,
        keepAlive: true,
        keepAliveInitialDelay: 120000,
        logger: null,
        loggerLevel, 
        maxPoolSize,
        maxIdleTimeMS,
        minSize: 0,
        minPoolSize: 0,
        noDelay: true,
        pkFactory: null,

        promoteBuffers: false,
        promoteLongs: true,
        promoteValues: true,
        raw: false,
        serializeFunctions: false,
        socketTimeoutMS: 360000, // 6 min
        waitQueueTimeoutMS,

        useUnifiedTopology: true,
      });

      try {
        database = (await client).db();
        Log.verbose('ðŸ—„  Connected to database');
        if (collection) {
          return database.collection(collection);
        } else return database;
      } catch (err) {
        Log.err('âš ï¸Ž Error :  Connection to database', err);
        if (!process.env.NO_DATABASE_HEALTHCHECK) {
          process.exit(1);
        }
      }
    } else {
        try {
            database = (await client).db();
            if (collection) {
              return database.collection(collection);
            } else return database;
          } catch (err) {
            Log.err('[?] DATABASE ERROR', err);
            if (!process.env.NO_DATABASE_HEALTHCHECK) {
              process.exit(1);
            }
          }
    }
  } else {
    Log.warn('DATABASE URL UNDEFINED');
  }
};
