const Log = require( '../methods/log' ),
    QueryThen = require( './then.js' ),

    /**
     * Aliases (strings or functions returning a string)
     * @param {Array} args - arguments
     * @param {string} action
     * @returns {string} action
     */
    Aliases = {
        'create': 'insert',
        'delete': 'remove',
        'set': 'findAndModify',
        'update': require( './aliases/update.js' ),
        'save': require( './aliases/save.js' )
    },

    /**
     * Transform functions
     * @param {Array} args - arguments
     * @returns {Array} formated arguments
     */
    Transform = {
        'set': require( './transform/set.js' ),
        'update': require( './transform/update.js' ),
        'insert': require( './transform/insert.js' ),
        'create': require( './transform/insert.js' ),
        'findAndModify': require( './transform/findAndModify.js' ),
        'save': require( './transform/save.js' )
    };

function QueryBuilder( collection, action ) {

    return function Query() {

        let args = Array.from( arguments );

        if ( Transform[ action ] )
            args = Transform[ action ]( args );

        if ( Aliases[ action ] && typeof Aliases[ action ] === 'string' )
            action = Aliases[ action ];

        if ( Aliases[ action ] && typeof Aliases[ action ] === 'function' )
            action = Aliases[ action ]( args, action );

        let prox = new Proxy( {
            query: []
        }, {

            get( target, chain ) {

                if ( typeof chain !== 'string' ) return undefined;
                if ( ~[ 'inspect', 'valueOf' ].indexOf( chain ) )
                    return undefined;

                if ( chain === 'then' ) {
                    return QueryThen( target, collection, action, args );
                }

                if ( chain === 'forEach' ) {
                    return (iterator, err) => QueryThen( target, collection, action, args )((res,e) => {
                        if(e) return err(e);
                        return res.map(iterator);
                    });
                }

                return function () {
                    let ar = Array.from( arguments );
                    target.query.push( {
                        action: chain,
                        args: ar
                    } );
                    return prox;
                };

            }
        } );

        return prox;

    };

}

module.exports = QueryBuilder;
