const Database = require( './connection.js' ),
    //Events = require( '../methods/events' ),
    Log = require( '../methods/log' ),

    /**
     * After functions
     * @param {mixed} result - query result
     * @param {object} db - database connection
     * @param {Array} args - arguments
     * @returns {object} promise (only handle resolve)
     */
    After = {
        'insert': require( './after/insertSaveSet.js' ),
        'save': require( './after/insertSaveSet.js' ),
        'set': require( './after/insertSaveSet.js' ),
        'update': require( './after/update.js' )
    },
    observableCollections = require('./observableCollections') ;

var service = 'unknown service';
const DEBUG = process.env.debug;

try {
    var pkg = require( process.cwd() + '/package.json' );
    service = pkg.name || service;
} catch ( e ) {}
let MODE = {
    db: (process.env.mode || '').includes('db'),
    kafka: (process.env.mode || '').includes('kafka'),
};
if (!MODE.db && !MODE.kafka) MODE.db = true;
module.exports = ( target, collection, action, args ) =>
    function queryThen( cb, err ) {
        const uuid = Date.now() + Math.random();
        if(DEBUG) console.log('['+uuid+'] QueryTHEN');

        let diff = Date.now();

        let p = new Promise( ( resolve, reject ) => {

            Database( collection )
                .then( database => {
                    if ( !database ) {
                        console.error('NO DATABASE');
                        return resolve(undefined);
                    }

                    if ( !database[ action ] )
                        return reject(
                            `Method '${action}' not found for '${collection}'`
                        );

                    if(DEBUG) Log.silly('['+uuid+'] DATABASE CALL %s %s %o', collection, action, JSON.stringify(args));


                    let result = database[ action ]
                        .apply( database, args );

                        if(DEBUG) Log.silly('['+uuid+'] CALL SENT TO DB');

                    while ( target.query.length ) {
                        q = target.query.shift();
                        if ( result[ q.action ] )
                            result = result[ q.action ]
                            .apply( result, q.args );
                        else
                            return reject(
                                `Chained-method '${q.action}' not found`
                            );
                    }

                    if ( result.toArray )
                        result = result.toArray();

                        //) Log.silly('['+uuid+'] RECEIVED DB CURSOR');

                    if ( !result.then )
                        return customcb( result );

                    return result.then( customcb, (a) => {
                        if(DEBUG) Log.error('['+uuid+'] DB REJECTED %o', a);
                        reject(a);
                    });

                    function customcb( result ) {

                        if(DEBUG) Log.silly('['+uuid+'] DB RESOLVED %s', JSON.stringify(result));

                        if ( !result ) return resolve( result );

                        if ( After[ action ] ) {
                            if(DEBUG) Log.silly('['+uuid+'] AFTER DB EXEC');
                            After[ action ]( result, database, args )
                                .then(
                                    ( res ) => {
                                        if(DEBUG) Log.silly('['+uuid+'] DB DELEGATE 1');
                                        resolve( res );
                                        emitEvent(
                                            action,
                                            collection,
                                            res
                                        );
                                    }
                                );
                        } else {
                            if ( result.ops )
                                result = result.ops;

                            if ( result.value )
                                result = result.value;

                            if(DEBUG) Log.silly('['+uuid+'] DB DELEGATE 2');
                            resolve( result );
                            emitEvent( action,
                                collection,
                                result
                            );
                        }
                    }

                }, reject );
        } );

        if(DEBUG) Log.silly('['+uuid+'] DB CB');

        diff = Date.now() - diff;
        if(diff > 2000) Log.warn(`/!\ DB Request took ${diff}ms : ${collection}.${action}(${args})`)
        else if(diff > 1000) Log.silly(`/!\ DB Request took ${diff}ms : ${collection}.${action}(${args})`)

        if ( cb && err )
            p.then( cb, err );
        else if ( cb )
            p.then( cb );

        return p;
    };

function emitEvent( ev, collectionName, res ) {
    if (MODE.db) {
        ev = ( ev === 'findAndModify' ) ? 'update' : ev;
        if ( collectionName == "poetry_events" ) return;
        if (!observableCollections.contains(collectionName)) return;
    
        if ( [
                'insert',
                'update',
                'save'
            ].indexOf( ev ) > -1 ){
                Database( 'poetry_events' )
                    .then(db => {
                        db.insert({
                            name: ev + ':' + collectionName,
                            message: [res],
                            service: service,
                            createdAt: new Date()
                        })
                        .then((result) => {
                            try {
                                Log.verbose(
                                    'ðŸ“¤  Event emited: %s %s',
                                    result.ops[0].name,
                                    `(${result.ops[0]._id})`
                                );
                            } catch(e) {
                                Log.error(e);
                            }
                        }, Log.error);
                    }, Log.error);
            }
    }
}
