const logPoetry = require('./methods/log'),
  Kafka = require('kafkajs').Kafka,
  logLevel = require('kafkajs').logLevel;
var service = 'poetry';
try {
  var pkgServ = require( process.cwd() + '/package.json' );
  service = process.env.service_name || pkgServ.name;
} catch ( e ) {}

const clientId = process.env.HOSTNAME || `${service}_${Math.random().toString(36)}`;

module.exports = async function getKafka() {
  if (!process.env.KAFKA) return;

  return new Kafka({
    clientId,
    brokers: process.env.KAFKA.split(','),
    logCreator: () => ({ namespace, level, label, log }) => {
      if (!log[level]) level = 'silly';
      switch(level) {
        case logLevel.ERROR:
        case logLevel.NOTHING:
          logPoetry.error('KAFKA', label, namespace, log.message);
          break;
        case logLevel.WARN:
          logPoetry.warn('KAFKA', label, namespace, log.message);
          break;
        case logLevel.INFO:
          logPoetry.info('KAFKA', label, namespace, log.message);
          break
        case logLevel.DEBUG:
          logPoetry.debug('KAFKA', label, namespace, log.message);
          break;
        default:
          logPoetry.silly('KAFKA', label, namespace, log.message);
      }
    },
    retry: {
      maxRetryTime: 30000,
      retries: 10
    }
  });
}

module.exports.service = service;
