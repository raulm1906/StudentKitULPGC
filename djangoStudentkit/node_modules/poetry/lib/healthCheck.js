const server = require( './server' ),
  events = require('./methods/events'),
  Sessions = require('../models').Sessions,
  Log = require( './methods/log' ),
  fs = require('fs'),
  Database = require( './db/connection' );

var hc = fs.readFileSync(__dirname+'/../healthCheck.html').toString();
var startedAt = Date.now();

module.exports.name = name => {
  hc = hc.replace(/\%SERVICE\%/g, name);
}

module.exports.healthCheckPATH = healthCheckPATH => {
  hc = hc.replace(/\%HEALTHCHECK_PATH\%/g, healthCheckPATH);
}

module.exports.service = (poetryConfig, serviceConfig) => {
  return (request, reply) => {
    if(process.env.DEBUG_HC) {
      Log.debug('HealthCheck controller');
    }
    var buildDate;
    try{
      buildDate = require( process.cwd() + '/.buildDate.json' );
    }catch(e){
      buildDate = serviceConfig.version;
    }

    var poang;
    try{
      poang = require( process.cwd() + '/node_modules/poetry-angular/package.json' );
      poang = poang.version;
    }catch(e){}

    var dependencies = {};
    Object.keys(poetryConfig.dependencies||{})
      .forEach(key=>dependencies[key]=poetryConfig.dependencies[key]);
    Object.keys(serviceConfig.dependencies||{})
      .forEach(key=>dependencies[key]=serviceConfig.dependencies[key]);

    if(process.env.DEBUG_HC) {
      Log.debug(`HealthCheck replying: uptime ${Date.now()-((server.info)?server.info.started:startedAt)}`);
    }
    reply({
      service:{
        name: process.env.service_name || serviceConfig.name,
        version: buildDate,
      },
      poetry:{
        version: poetryConfig.version,
        poang,
      },
      uptime: Date.now()-((server.info)?server.info.started:startedAt),
      isAuth: !!request.session.isAuthenticated,
      dependencies,
      knownServices: events.services,
    });
  };
}

module.exports.global = (request,reply) => {
  
  const d = Date.now();
  if(process.env.DEBUG_HC) console.log(`[${d}] HC Ping`);

  if(process.env.DATABASE && !process.env.NO_DATABASE_HEALTHCHECK){
    Database().then((db)=>{
      db.command({ ping: 1 }).then((val)=>{
        if(process.env.DEBUG_HC) console.log(`[${d}] HC Pong`);
        reply(hc)
      .header('Content-Type', 'text/html')
      })
    })
  } else {
    if(process.env.DEBUG_HC) console.log(`[${d}] HC Pong`);
    reply(hc).header('Content-Type', 'text/html');
  }
}
