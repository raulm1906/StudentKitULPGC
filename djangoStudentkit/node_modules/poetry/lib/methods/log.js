const winston = require('winston');

const LOG_LEVELS = ['error', 'warn', 'info', 'verbose', 'debug', 'silly'];

const CURRENT_LOG_LEVEL =
  process.env.logLevel && LOG_LEVELS.includes(process.env.logLevel)
    ? process.env.logLevel
    : 'info';

var transports = [
  new winston.transports.Console({
    showLevel: true,
    colorize: true,
    format: winston.format.combine(
      winston.format.colorize(),
      winston.format.splat(),
      winston.format.simple()
    ),
  }),
];

if (process.env.LOGS || process.env.logs) {
  var logs = process.env.LOGS || process.env.logs;
  try {
    logs = JSON.parse(logs);
    if (!Array.isArray(logs)) logs = [logs];
    logs.forEach(function (l) {
      transports.push(l);
    });
  } catch (e) {}
}

var logger = winston.createLogger({
  level: CURRENT_LOG_LEVEL,
  transports: transports
});

module.exports = wrap(logger.debug);
module.exports.silly = wrap(logger.silly);
module.exports.debug = wrap(logger.debug);
module.exports.verbose = wrap(logger.verbose);
module.exports.info = wrap(logger.info);
module.exports.warn = wrap(logger.warn);
module.exports.warning = wrap(logger.warn);
module.exports.err = wrap(logger.error);
module.exports.error = wrap(logger.error);

function wrap(logger) {
  return (...args) => {
    logger(args.map(a => {
      if (a instanceof Error) return a.stack;
      try {
        if (typeof a != 'string') a = JSON.stringify(a);
      } catch(e) {
        try {
          if (typeof a != 'string') a = a.toString();
        } catch(e) {}
      }

      return a;
    }).join(' '));
  }
}
