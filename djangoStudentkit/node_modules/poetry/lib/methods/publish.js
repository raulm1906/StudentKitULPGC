var Log = require( '../methods/log' );
var ifcs = require( 'os' )
    .networkInterfaces();
var service = 'unknown service',
    address = '';

try {
    var pkg = require( process.cwd() + '/package.json' );
    service = pkg.name || service;
} catch ( e ) {}

try {
    address = ifcs.eth0[ 0 ].address;
} catch ( e ) {}

/**
 * Poetry.subscribe
 * Listen to kafka topic
 * @param {object} topic Kafka topic we are listening to
 * @param {function} handler Function receiving the message (message, successCB)
 * @returns {void} void
 */

const getKafka = require('../getKafka');

let producerInstance;

module.exports = async function publish(topic, message) {
  // Get kafka producer
  const producer = await getKafkaProducer();

  // If we don't have a producer, abort
  if (!producer) return Log.error('ðŸ“¥ Could not find producer');

  // Listen to the topic
  const res = await producer.send({
    topic,
    messages: [ { 
      value: JSON.stringify(message), 
      timestamp: Date.now(),
      headers: {
        service,
        address,
    } } ],
  });

  Log.verbose( `ðŸ“¥  Sent to KAFKA topic "${topic}" (offset ${res[0].baseOffset})`);
}

// Get the producer
async function getKafkaProducer() {
  if (!producerInstance) {
    // Get kafka connection
    const kafka = await getKafka();

    // If we don't have a connection, abort
    if (!kafka) return;

    const producer = kafka.producer();

    await producer.connect();
    producerInstance = producer;
  }
  Log.debug('ðŸ“¥ Producer connected');

  return producerInstance;
}
