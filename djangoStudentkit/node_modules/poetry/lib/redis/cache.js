const Log = require( '../methods/log' );
const redisCache = require( './redis' );
const Events = require( '../methods/events' );

const DEBUG_REDIS = process.env.DEBUG_REDIS;

/**
 * connections by prefixes
 */
const redisConnections = {};

/**
 * 
 * @param {*} prefix 
 * @param {*} [optionsSet] 
 * @param {*} [optionsFn] 
 * @returns 
 */
function createConnection(prefix, optionsSet, optionsFn) {
  const conn = redisCache(prefix, optionsSet);
  if (conn && typeof optionsFn === 'function') {
    try {
      optionsFn(conn);
    } catch (e) {
      Log.error(e);
    }
  }
  return conn;
}

/**
 * 
 * @param {*} prefix 
 * @param {*} [optionsSet] 
 * @param {*} [optionsFn] 
 * @returns 
 */
function getCustomConnection(prefix, optionsSet, optionsFn) {
  if (!redisConnections[prefix]) {
    redisConnections[prefix] = createConnection(prefix, optionsSet, optionsFn);
  }
  return redisConnections[prefix];
}

/**
 * 
 * @param {*} prefix 
 * @param {*} [optionsSet] 
 * @param {*} [evtOptions] 
 * @returns 
 */
 function getConnection(prefix, optionsSet, evtOptions) {
  evtOptions = evtOptions || {};
  evtOptions.events = evtOptions.events || {};
  evtOptions.props = Array.isArray(evtOptions.props) ? evtOptions.props : [];
  let events = [];
  let props = [];
  if (Array.isArray(evtOptions.props)) {
    props = evtOptions.props.filter(p => p && typeof p === 'string');
  }
  Object.keys(evtOptions.events).forEach(k => {
    if (!evtOptions.events[k]) return;
    let evtOpt = {
      name: k,
      action: evtOptions.events[k]
    };
    if (typeof evtOpt.action != 'function' && !(['set', 'delete', 'del'].includes(evtOpt.action))) {
      evtOpt.action = 'set';
    }
    events.push(evtOpt);
  });
  return getCustomConnection(prefix, optionsSet, (conn) => {
    if (prefix) {
      let splitPrefix = prefix.split(':');
      let cPrefix = '';
      splitPrefix.forEach(word => {
        cPrefix += word.substring(0, 1).toUpperCase() + word.substring(1);
      });
      if (cPrefix) {
        conn[`set${cPrefix}`] = async (message) => {
          if(message._id) {
            if (props.length) {
              let tmp = {};
              props.forEach(p => {
                tmp[p] = message[p];
              });
              if (DEBUG_REDIS) Log.silly(`REDIS: set ${message._id}`);
              await conn.set(`${message._id}`, tmp);
            } else {
              if (DEBUG_REDIS) Log.silly(`REDIS: set ${message._id}`);
              await conn.set(`${message._id}`, message);
            }
          }
        };
        conn[`get${cPrefix}`] = async (message) => {
          if(message._id) {
            return await conn.get(message._id);
          }
        };
        conn[`del${cPrefix}`] = async (message) => {
          if(message._id) {
            if (DEBUG_REDIS) Log.silly(`REDIS: delete ${message._id}`);
            await conn.del(`${message._id}`);
          }
        };
      }
    }
    conn.setObject = async (message) => {
      if (message._id) {
        if (props.length) {
          let tmp = {};
          props.forEach((p) => {
            tmp[p] = message[p];
          });
          if (DEBUG_REDIS) Log.silly(`REDIS: set ${message._id}`);
          await conn.set(`${message._id}`, tmp);
        } else {
          if (DEBUG_REDIS) Log.silly(`REDIS: set ${message._id}`);
          await conn.set(`${message._id}`, message);
        }
      }
    };
    conn.getObject = async (message) => {
      if (message._id) {
        return await conn.get(message._id);
      }
    };
    conn.delObject = async (message) => {
      if (message._id) {
        if (DEBUG_REDIS) Log.silly(`REDIS: delete ${message._id}`);
        await conn.del(`${message._id}`);
      }
    };
    events.forEach(evt => {
      try {
        if (typeof evt.action == 'function') {
          evt.action(conn);
        } else if (evt.action == 'set') {
          Log.silly(`REDIS: Listen to setter ${evt.name}`);
          Events.on(evt.name, {}, async (message) => {
            if(message._id) {
              if (props.length) {
                let tmp = {};
                props.forEach(p => {
                  tmp[p] = message[p];
                });
                Log.silly(`REDIS: set ${message._id}`, tmp);
                await conn.set(`${message._id}`, tmp);
              } else {
                Log.silly(`REDIS: set ${message._id}`, message);
                await conn.set(`${message._id}`, message);
              }
            }
          } );
        } else if (evt.action == 'delete' || evt.action == 'del') {
          Log.silly(`REDIS: Listen to delete ${evt.name}`);
          Events.on(evt.name, {}, async (message) => {
            if(message._id) {
              Log.silly(`REDIS: delete ${message._id}`);
              await conn.del(`${message._id}`);
            }
          } );
        }
      } catch(e){
        Log.error(e);
      }
    })
  });
}

module.exports = {
  getConnection,
  getCustomConnection
};
